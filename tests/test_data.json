[
    {
        "name": "return0",
        "description": "Just returns 0",
        "filename": "basic_arithmetic/return0.dpl",
        "input": [],
        "output": 0
    },
    {
        "name": "return2",
        "description": "Just returns 2",
        "filename": "basic_arithmetic/return2.dpl",
        "input": [],
        "output": 2
    },
    {
        "name": "return2minus1",
        "description": "Returns 2 - 1",
        "filename": "basic_arithmetic/return2minus1.dpl",
        "input": [],
        "output": 1
    },
    {
        "name": "return2plus2",
        "description": "returns 2 + 2",
        "filename": "basic_arithmetic/return2plus2.dpl",
        "input": [],
        "output": 4
    },
    {
        "name": "return2plus3times4",
        "description": "returns 2 + 3 * 4",
        "filename": "basic_arithmetic/return2plus3times4.dpl",
        "input": [],
        "output": 14
    },
    {
        "name": "return2times3",
        "description": "returns 2 * 3",
        "filename": "basic_arithmetic/return2times3.dpl",
        "input": [],
        "output": 6
    },
    {
        "name": "return3times4plus2",
        "description": "returns 3 * 4 + 2",
        "filename": "basic_arithmetic/return3times4plus2.dpl",
        "input": [],
        "output": 14
    },
    {
        "name": "return6over3",
        "description": "returns 6/3",
        "filename": "basic_arithmetic/return6over3.dpl",
        "input": [],
        "output": 2
    },
    {
        "name": "returnParentheses",
        "description": "returns 6*(3+1)",
        "filename": "basic_arithmetic/returnParentheses.dpl",
        "input": [],
        "output": 24
    },
    {
        "name": "returnLongSum",
        "description": "returns 2+2+3+5+6+0+1+2+4",
        "filename": "basic_arithmetic/returnLongSum.dpl",
        "input": [],
        "output": 25
    },
    {
        "name": "returnLongMixedSum",
        "description": "returns 2+2-3+5-6+0+1+2-4+2",
        "filename": "basic_arithmetic/returnLongMixedSum.dpl",
        "input": [],
        "output": 1
    },
    {
        "name": "returnNestedParentheses",
        "description": "returns 6*((3-2)+1*(2+(1-(-5))*6)))",
        "filename": "basic_arithmetic/returnNestedParentheses.dpl",
        "input": [],
        "output": 234
    },
    {
        "name": "returnNeg",
        "description": "returns -3 (the return code is an unsigned byte so it underflows)",
        "filename": "basic_arithmetic/returnNeg.dpl",
        "input": [],
        "output": 253
    },
    {
        "name": "returnNot",
        "description": "returns !23 (binary not)",
        "filename": "basic_arithmetic/returnNot.dpl",
        "input": [],
        "output": 232
    },
	{
		"name": "returnincrement1",
		"description": "returns ++1",
		"filename": "basic_arithmetic/returnincrement1.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "returndecrement1",
		"description": "returns --1",
		"filename": "basic_arithmetic/returndecrement1.dpl",
		"input": [],
		"output": 0
	},
	{
		"name": "hex_literal",
		"description": "Hexadecimal literal",
		"filename": "basic_arithmetic/hex_literal.dpl",
		"input": [],
		"output": 175
	},
	{
		"name": "bin_literal",
		"description": "Binary literal",
		"filename": "basic_arithmetic/bin_literal.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "bool_literal",
		"description": "Boolean literal",
		"filename": "basic_arithmetic/bool_literal.dpl",
		"input": [],
		"output": 1
	},
	{
        "name": "assign2",
        "description": "Creates variable a and assigns 2 to it",
        "filename": "variables/assign2.dpl",
        "input": [],
        "output": 2
    },
	{
        "name": "assign2Add1",
        "description": "Creates variable a and assigns 2 to it, then adds 1",
        "filename": "variables/assign2Add1.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "declareThenAssign4",
        "description": "Declares empty variable a, then later assigns 4 to it",
        "filename": "variables/declareThenAssign4.dpl",
        "input": [],
        "output": 4
    },
	{
        "name": "declareAeq1Beq2",
        "description": "Initializes a and b to 1 and 2, then returns a+b",
        "filename": "variables/declareAeq1Beq2.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "shadowing",
        "description": "Test that redeclaring a variable on a smaller scope shadows the outer variable",
        "filename": "variables/shadowing.dpl",
        "input": [],
        "output": 7
    },
	{
		"name": "plus_equals",
		"description": "Test the += operator",
		"filename": "variables/plus_equals.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "minus_equals",
		"description": "Test the -= operator",
		"filename": "variables/minus_equals.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "times_equals",
		"description": "Test the *= operator",
		"filename": "variables/times_equals.dpl",
		"input": [],
		"output": 6
	},
	{
		"name": "div_equals",
		"description": "Test the /= operator",
		"filename": "variables/div_equals.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "mod_equals",
		"description": "Test the %= operator",
		"filename": "variables/mod_equals.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "binand_equals",
		"description": "Test the &= operator",
		"filename": "variables/binand_equals.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "binor_equals",
		"description": "Test the |= operator",
		"filename": "variables/binor_equals.dpl",
		"input": [],
		"output": 7
	},
	{
		"name": "binxor_equals",
		"description": "Test the ^= operator",
		"filename": "variables/binxor_equals.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "lshift_equals",
		"description": "Test the <<= operator",
		"filename": "variables/lshift_equals.dpl",
		"input": [],
		"output": 96
	},
	{
		"name": "rshift_equals",
		"description": "Test the >>= operator",
		"filename": "variables/rshift_equals.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "const",
		"description": "Test the const keyword",
		"filename": "variables/const.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "const_post_definition",
		"description": "Test the const keyword after the constant is used",
		"filename": "variables/const_post_definition.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "multiple_constants",
		"description": "Test multiple constants",
		"filename": "variables/multiple_constants.dpl",
		"input": [],
		"output": 28
	},
	{
		"name": "const_shadowing",
		"description": "Test that redeclaring a local var on a smaller scope shadows the outer constant",
		"filename": "variables/const_shadowing.dpl",
		"input": [],
		"output": 14
	},
	{
		"name": "reassign",
		"description": "Reassign a variable",
		"filename": "variables/reassign.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "reassign_ptr",
		"description": "Reassign a pointer",
		"filename": "variables/reassign_ptr.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "reassign_arr",
		"description": "Reassign an element of an array",
		"filename": "variables/reassign_arr.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "reassign_member",
		"description": "Reassign a member of a struct",
		"filename": "variables/reassign_member.dpl",
		"input": [],
		"output": 98
	},
	{
		"name": "reassign_mixed",
		"description": "Reassign a dereferenced pointer in an array which is a member of a struct which is a member of an other struct. If this works, reassignments should be good to go",
		"filename": "variables/reassign_mixed.dpl",
		"input": [],
		"output": 3
	},
	{
        "name": "else_if_chain",
        "description": "Chain of else ifs",
        "filename": "control_flow/else_if_chain.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "if0_else_if_0",
        "description": "If and else if, both false",
        "filename": "control_flow/if0_else_if_0.dpl",
        "input": [],
        "output": 5
    },
	{
		"name": "if0_else_if_1",
		"description": "If false, else if true",
		"filename": "control_flow/if0_else_if_1.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0_else",
		"description": "If false, else",
		"filename": "control_flow/if0_else.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0_no_brackets",
		"description": "If statement evaluating to false without brackets",
		"filename": "control_flow/if0_no_brackets.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0",
		"description": "If statement evaluating to false",
		"filename": "control_flow/if0.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if1_else",
		"description": "If true, else",
		"filename": "control_flow/if1_else.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "if1",
		"description": "If true",
		"filename": "control_flow/if1.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "while",
		"description": "While loop",
		"filename": "control_flow/while.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "while_break",
		"description": "While loop with a break statement",
		"filename": "control_flow/while_break.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "while_continue",
		"description": "While loop with a continue statement",
		"filename": "control_flow/while_continue.dpl",
		"input": [],
		"output": 0
	},
	{
		"name": "for",
		"description": "For loop",
		"filename": "control_flow/for.dpl",
		"input": [],
		"output": 30
	},
	{
		"name": "dowhile",
		"description": "Do while loop",
		"filename": "control_flow/dowhile.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "loop",
		"description": "Loop statement",
		"filename": "control_flow/loop.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "function",
		"description": "Function call",
		"filename": "functions/function.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "fibonacci_recursive",
		"description": "Recursive fibonacci function",
		"filename": "complicated_programs/fibonacci_recursive.dpl",
		"input": [],
		"output": 55
	},
	{
		"name": "fibonacci_iterative",
		"description": "Iterative fibonacci function",
		"filename": "complicated_programs/fibonacci_iterative.dpl",
		"input": [],
		"output": 55
	},
	{
		"name": "define",
		"description": "Define a macro",
		"filename": "preprocessor/define.dpl",
		"input": [],
		"output": 15
	},
	{
		"name": "ifdef_else_false",
		"description": "Ifdef with else, ifdef false",
		"filename": "preprocessor/ifdef_else_false.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "ifdef_else_true",
		"description": "Ifdef with else, ifdef true",
		"filename": "preprocessor/ifdef_else_true.dpl",
		"input": [],
		"output": 15
	},
	{
		"name": "ifndef_else_false",
		"description": "Ifndef with else, ifndef false",
		"filename": "preprocessor/ifndef_else_false.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "ifndef_else_true",
		"description": "Ifndef with else, ifndef true",
		"filename": "preprocessor/ifndef_else_true.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "include",
		"description": "Include a file",
		"filename": "preprocessor/include.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "undef",
		"description": "Undefine a macro",
		"filename": "preprocessor/undef.dpl",
		"input": [],
		"output": 15
	},
	{
		"name": "pointer",
		"description": "Pointer",
		"filename": "pointers/pointer.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "triple_dereference",
		"description": "Triple dereference",
		"filename": "pointers/triple_dereference.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "array",
		"description": "1d Array creating and access",
		"filename": "arrays/array.dpl",
		"input": [],
		"output": 5
	},
	{
		"name": "array2d",
		"description": "2d Array creating and access",
		"filename": "arrays/array2d.dpl",
		"input": [],
		"output": 9
	},
	{
		"name": "array_2d_implicit",
		"description": "2d Array creating and access with implicit shape",
		"filename": "arrays/array_2d_implicit.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "edgecase_to_fix",
		"description": "weird edgecase where the elements of the array would be added to scope, but not the variable containing the array pointer",
		"filename": "arrays/edgecase_to_fix.dpl",
		"input": [],
		"output": 0
	},
	{
		"name": "array_reassign",
		"description": "Reassign an element of an array",
		"filename": "arrays/array_reassign.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "char",
		"description" : "char type declaration with single character and cast to int to return",
		"filename": "strings/char.dpl",
		"input": [],
		"output": 97
	},
	{
		"name": "long_char_shift",
		"description" : "char with 8 characters, and shift it's bits to access one of the middle values",
		"filename": "strings/long_char_shift.dpl",
		"input": [],
		"output": 102
	},
	{
		"name": "long_char",
		"description" : "char with 8 characters, return first one",
		"filename": "strings/long_char.dpl",
		"input": [],
		"output": 97
	},
	{
		"name": "long_str_shift",
		"description" : "long string, access one character in the middle",
		"filename": "strings/long_str_shift.dpl",
		"input": [],
		"output": 50
	},
	{
		"name": "str_shift",
		"description" : "access a character in the middle of a short string",
		"filename": "strings/str_shift.dpl",
		"input": [],
		"output": 98
	},
	{
		"name": "str",
		"description" : "declare a short string, return it's first character",
		"filename": "strings/str.dpl",
		"input": [],
		"output": 97
	},
	{
		"name": "struct",
		"description": "Struct",
		"filename": "structs/struct.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "struct_nested",
		"description": "Nested structs",
		"filename": "structs/struct_nested.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "struct_array",
		"description": "Struct with array member",
		"filename": "structs/struct_array.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "struct_array2",
		"description": "Cast struct member to int",
		"filename": "structs/struct_array2.dpl",
		"input": [],
		"output": 98
	},
	{
		"name": "array_of_structs",
		"description": "Array containing structs",
		"filename": "structs/array_of_structs.dpl",
		"input": [],
		"output": 98
	},
	{
		"name": "array_of_structs_literals",
		"description": "Array of struct literals",
		"filename": "structs/array_of_structs_literals.dpl",
		"input": [],
		"output": 98
	},
	{
		"name": "enums",
		"description": "Enums",
		"filename": "structs/enum.dpl",
		"input": [],
		"output": 2
	},
	{
		"name": "enum_reassign",
		"description": "Reassign enum",
		"filename": "structs/enum_reassign.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "enum_array",
		"description": "Array of enums",
		"filename": "structs/enum_array.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "enum_struct",
		"description": "Enum in struct",
		"filename": "structs/enum_struct.dpl",
		"input": [],
		"output": 0
	},
	{
		"name": "inline_asm",
		"description": "Inline assembly",
		"filename": "inline_asm/inline_asm.dpl",
		"input": [],
		"output": 3
	}
]