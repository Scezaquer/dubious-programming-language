[
    {
        "name": "return0",
        "description": "Just returns 0",
        "filename": "basic_arithmetic/return0.dpl",
        "input": [],
        "output": 0
    },
    {
        "name": "return2",
        "description": "Just returns 2",
        "filename": "basic_arithmetic/return2.dpl",
        "input": [],
        "output": 2
    },
    {
        "name": "return2minus1",
        "description": "Returns 2 - 1",
        "filename": "basic_arithmetic/return2minus1.dpl",
        "input": [],
        "output": 1
    },
    {
        "name": "return2plus2",
        "description": "returns 2 + 2",
        "filename": "basic_arithmetic/return2plus2.dpl",
        "input": [],
        "output": 4
    },
    {
        "name": "return2plus3times4",
        "description": "returns 2 + 3 * 4",
        "filename": "basic_arithmetic/return2plus3times4.dpl",
        "input": [],
        "output": 14
    },
    {
        "name": "return2times3",
        "description": "returns 2 * 3",
        "filename": "basic_arithmetic/return2times3.dpl",
        "input": [],
        "output": 6
    },
    {
        "name": "return3times4plus2",
        "description": "returns 3 * 4 + 2",
        "filename": "basic_arithmetic/return3times4plus2.dpl",
        "input": [],
        "output": 14
    },
    {
        "name": "return6over3",
        "description": "returns 6/3",
        "filename": "basic_arithmetic/return6over3.dpl",
        "input": [],
        "output": 2
    },
    {
        "name": "returnParentheses",
        "description": "returns 6*(3+1)",
        "filename": "basic_arithmetic/returnParentheses.dpl",
        "input": [],
        "output": 24
    },
    {
        "name": "returnLongSum",
        "description": "returns 2+2+3+5+6+0+1+2+4",
        "filename": "basic_arithmetic/returnLongSum.dpl",
        "input": [],
        "output": 25
    },
    {
        "name": "returnLongMixedSum",
        "description": "returns 2+2-3+5-6+0+1+2-4+2",
        "filename": "basic_arithmetic/returnLongMixedSum.dpl",
        "input": [],
        "output": 1
    },
    {
        "name": "returnNestedParentheses",
        "description": "returns 6*((3-2)+1*(2+(1-(-5))*6)))",
        "filename": "basic_arithmetic/returnNestedParentheses.dpl",
        "input": [],
        "output": 234
    },
    {
        "name": "returnNeg",
        "description": "returns -3 (the return code is an unsigned byte so it underflows)",
        "filename": "basic_arithmetic/returnNeg.dpl",
        "input": [],
        "output": 253
    },
    {
        "name": "returnNot",
        "description": "returns !23 (binary not)",
        "filename": "basic_arithmetic/returnNot.dpl",
        "input": [],
        "output": 232
    },
	{
        "name": "assign2",
        "description": "Creates variable a and assigns 2 to it",
        "filename": "variables/assign2.dpl",
        "input": [],
        "output": 2
    },
	{
        "name": "assign2Add1",
        "description": "Creates variable a and assigns 2 to it, then adds 1",
        "filename": "variables/assign2Add1.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "declareThenAssign4",
        "description": "Declares empty variable a, then later assigns 4 to it",
        "filename": "variables/declareThenAssign4.dpl",
        "input": [],
        "output": 4
    },
	{
        "name": "declareAeq1Beq2",
        "description": "Initializes a and b to 1 and 2, then returns a+b",
        "filename": "variables/declareAeq1Beq2.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "shadowing",
        "description": "Test that redeclaring a variable on a smaller scope shadows the outer variable",
        "filename": "variables/shadowing.dpl",
        "input": [],
        "output": 7
    },
	{
        "name": "else_if_chain",
        "description": "Chain of else ifs",
        "filename": "control_flow/else_if_chain.dpl",
        "input": [],
        "output": 3
    },
	{
        "name": "if0_else_if_0",
        "description": "If and else if, both false",
        "filename": "control_flow/if0_else_if_0.dpl",
        "input": [],
        "output": 5
    },
	{
		"name": "if0_else_if_1",
		"description": "If false, else if true",
		"filename": "control_flow/if0_else_if_1.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0_else",
		"description": "If false, else",
		"filename": "control_flow/if0_else.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0_no_brackets",
		"description": "If statement evaluating to false without brackets",
		"filename": "control_flow/if0_no_brackets.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if0",
		"description": "If statement evaluating to false",
		"filename": "control_flow/if0.dpl",
		"input": [],
		"output": 4
	},
	{
		"name": "if1_else",
		"description": "If true, else",
		"filename": "control_flow/if1_else.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "if1",
		"description": "If true",
		"filename": "control_flow/if1.dpl",
		"input": [],
		"output": 3
	},
	{
		"name": "while",
		"description": "While loop",
		"filename": "control_flow/while.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "while_break",
		"description": "While loop with a break statement",
		"filename": "control_flow/while_break.dpl",
		"input": [],
		"output": 1
	},
	{
		"name": "while_continue",
		"description": "While loop with a continue statement",
		"filename": "control_flow/while_continue.dpl",
		"input": [],
		"output": 0
	},
	{
		"name": "for",
		"description": "For loop",
		"filename": "control_flow/for.dpl",
		"input": [],
		"output": 30
	},
	{
		"name": "dowhile",
		"description": "Do while loop",
		"filename": "control_flow/dowhile.dpl",
		"input": [],
		"output": 10
	},
	{
		"name": "loop",
		"description": "Loop statement",
		"filename": "control_flow/loop.dpl",
		"input": [],
		"output": 5
	}
]